configfile: "config.yaml"

import os

# 从配置文件中只读取 sample_list 文件中的样本路径
sample_list_file = config["sample_list"]
with open(sample_list_file) as f:
    # 假设每行是 'sample_name /full/path/to/fastq.gz'
    sample_files = [line.strip() for line in f if line.strip()]

# 构建样本名称到完整路径的映射字典
sample_dict = {}
for line in sample_files:
    sample_name, fastq_path = line.split()
    sample_dict[sample_name] = fastq_path

# 读取其它配置参数
outdir           = config["outdir"]
INDEX_BT         = config["INDEX_BT"]
INDEX_pre_BT     = config["INDEX_pre_BT"]
INDEX            = config["INDEX"]
INDEX_rRNA_BT    = config["INDEX_rRNA_BT"]
MINTplate        = config["MINTplate"]
INDEX_snoRNA_BT  = config["INDEX_snoRNA_BT"]

bowtie           = config["bowtie"]
samtools         = config["samtools"]
cutadapt         = config["cutadapt"]
fastqc           = config["fastqc"]
multiqc          = config["multiqc"]
findadapt        = config["findadapt"]

# 获取样本名称列表
samples = list(sample_dict.keys())

rule all:
    input:
        expand(f"{outdir}/multiqc/multiqc_report.html", sample=samples),
        expand(f"{outdir}/total/result.txt", sample=samples),
        f"{outdir}/clean_done"

rule findadapt:
    input:
        # 直接从 sample_dict 中获取原始 fastq 文件完整路径
        lambda wc: sample_dict[wc.sample]
    output:
       temp(f"{outdir}/findadapt_output/{{sample}}.adapter.txt"),
    shell:
        """
        {findadapt} -o {outdir}/findadapt_output/{wildcards.sample} -cut {input}
        """

rule cutadapt:
    input:
        fastq   = lambda wc: sample_dict[wc.sample],
        adapter = f"{outdir}/findadapt_output/{{sample}}.adapter.txt"
    output:
        temp(f"{outdir}/fix_fastq/{{sample}}.fastq.gz")
    shell:
        r"""
        # 从 findadapt 输出中提取 adapter（跳过表头，假设 adapter 在第3列），去重后保留为列表
        found_adapters=$(tail -n +2 {input.adapter} | awk '{{print $3}}' | sort -u)
        
        # 默认 adapter 列表（多个 adapter 用空格分隔）
        default_adapters="AGATCGGAAGAG TGGAATTCTCGG GATCGTCGGACT CTGTCTCTTATA AAAAAAAAAAAA GGGGGGGGGGGG"
        
        if [ -z "$found_adapters" ]; then
            echo "未在 {wildcards.sample} 中检测到 adapter，使用默认 adapter。"
            adapters="$default_adapters"
        else
            use_default=0
            for found in $found_adapters; do
                for def in $default_adapters; do
                    if [ "$found" = "$def" ]; then
                        use_default=1
                        break 2
                    fi
                done
            done
            if [ $use_default -eq 1 ]; then
                echo "检测到的 adapter与默认 adapter（100%覆盖），因此使用默认 adapter。"
                adapters="$default_adapters"
            else
                echo "使用检测到的 adapter：$found_adapters"
                adapters="$found_adapters"
            fi
        fi

        adapter_opts=""
        for a in $adapters; do
            adapter_opts="$adapter_opts -a $a"
        done
        echo "最终传递给 cutadapt 的 adapter 参数: $adapter_opts"
        
        {cutadapt} -j 8 --max-n 0 -m 10 -M 50 $adapter_opts -o {output} {input.fastq}
        """

rule fastQC:
    input:
        f"{outdir}/fix_fastq/{{sample}}.fastq.gz"
    output:
        html = f"{outdir}/html_fastq/{{sample}}_fastqc.html",
        zip  = f"{outdir}/html_fastq/{{sample}}_fastqc.zip"
    shell:
        "mkdir -p {outdir}/html_fastq/ && {fastqc} -o {outdir}/html_fastq/ {input}"

rule multiQC:
    input:
        expand(f"{outdir}/html_fastq/{{sample}}_fastqc.html", sample=samples),
        expand(f"{outdir}/html_fastq/{{sample}}_fastqc.zip", sample=samples)
    output:
        f"{outdir}/multiqc/multiqc_report.html"
    shell:
        "{multiqc} -o {outdir}/multiqc {outdir}/html_fastq/"

rule bt_mapping:
    input:
        f"{outdir}/fix_fastq/{{sample}}.fastq.gz"
    output:
        temp(f"{outdir}/miRNA_sam/{{sample}}.miRNA.aln.sam")
    log:
        temp(f"{outdir}/log_miRNA_sam/{{sample}}.miRNA.aln.log")
    shell:
        "zcat {input} | bowtie --seedlen 15 -p 1 -k1 -v1 -m2 -M1 --best -S {INDEX_BT} - 2> {log} > {output}"

rule miRNA_sort:
    input:
        f"{outdir}/miRNA_sam/{{sample}}.miRNA.aln.sam"
    output:
        temp(f"{outdir}/miRNA_bam/{{sample}}.miRNA.aln.bam")
    shell:
        "{samtools} sort -o {output} {input} && {samtools} index {output} && rm {input}"

rule miRNA_count:
    input:
        f"{outdir}/miRNA_bam/{{sample}}.miRNA.aln.bam"
    output:
        temp(f"{outdir}/miRNA_count/{{sample}}.miRNA.count.tsv")
    shell:
        "{samtools} idxstat {input} > {output}"

rule miRNA_sort_map:
    input:
        f"{outdir}/miRNA_bam/{{sample}}.miRNA.aln.bam"
    output:
        temp(f"{outdir}/miRNA_map/{{sample}}.miRNA.mapped.bam")
    shell:
        "{samtools} view -b -hSF 4 {input} > {output}"

rule miRNA_sort_unmap:
    input:
        f"{outdir}/miRNA_bam/{{sample}}.miRNA.aln.bam"
    output:
        temp(f"{outdir}/miRNA_unmap/{{sample}}.miRNA.unmapped.bam")
    shell:
        "{samtools} view -b -hSf 4 {input} > {output}"

rule premirna_mapping:
    input:
        f"{outdir}/miRNA_unmap/{{sample}}.miRNA.unmapped.bam"
    output:
        f"{outdir}/premiRNA_sam/{{sample}}.premiRNA.aln.sam"
    log:
        f"{outdir}/log_premiRNA_sam/{{sample}}.premiRNA.aln.log"
    shell:
        "{samtools} fastq {input} | bowtie --seedlen 15 -p 1 -k1 -v1 -m10 -M1 --best --strata --chunkmbs 8000 -S {INDEX_pre_BT} - 2> {log} > {output}"

rule premiRNA_sort:
    input:
        f"{outdir}/premiRNA_sam/{{sample}}.premiRNA.aln.sam"
    output:
        f"{outdir}/premiRNA_bam/{{sample}}.premiRNA.aln.bam"
    shell:
        "{samtools} sort -o {output} {input} && {samtools} index {output} && rm {input}"

rule premiRNA_count:
    input:
        f"{outdir}/premiRNA_bam/{{sample}}.premiRNA.aln.bam"
    output:
        f"{outdir}/premiRNA_count/{{sample}}.premiRNA.count.tsv"
    shell:
        "{samtools} idxstat {input} > {output}"

rule premiRNA_sort_map:
    input:
        f"{outdir}/premiRNA_bam/{{sample}}.premiRNA.aln.bam"
    output:
        f"{outdir}/premiRNA_map/{{sample}}.premiRNA.mapped.bam"
    shell:
        "{samtools} view -b -hSF 4 {input} > {output}"

rule premiRNA_sort_unmap:
    input:
        f"{outdir}/premiRNA_bam/{{sample}}.premiRNA.aln.bam"
    output:
        f"{outdir}/premiRNA_unmap/{{sample}}.premiRNA.unmapped.bam"
    shell:
        "{samtools} view -b -hSf 4 {input} > {output}"

rule premiRNA_unmap_to_fastq:
    input:
        f"{outdir}/premiRNA_unmap/{{sample}}.premiRNA.unmapped.bam"
    output:
        f"{outdir}/premiRNA_unmap_fastq/{{sample}}.premiRNA.unmapped.fastq"
    shell:
        """
        {samtools} fastq {input} > {output}
        """

rule process_fastq:
    input:
        fastq_file = f"{outdir}/premiRNA_unmap_fastq/{{sample}}.premiRNA.unmapped.fastq",
        tDR_file   = "sRNA-indexes/tDR/tDR_55.fa"
    output:
        output_file   = f"{outdir}/tDR_count/{{sample}}_tDR.txt",
        unmapped_file = f"{outdir}/tRNA_unmap/{{sample}}.tRNA.unmapped.fastq.gz"
    script:
        "tDRcount.py"

rule rRNA_mapping:
    input:
        f"{outdir}/tRNA_unmap/{{sample}}.tRNA.unmapped.fastq.gz"
    output:
        f"{outdir}/rRNA_sam/{{sample}}.rRNA.aln.sam"
    shell:
        "zcat {input} | bowtie --seedlen 15 -p 1 -k1 -v1 -m10 -M1 --best --strata --chunkmbs 8000 -S {INDEX_rRNA_BT} - > {output}"

rule rRNA_sort:
    input:
        f"{outdir}/rRNA_sam/{{sample}}.rRNA.aln.sam"
    output:
        f"{outdir}/rRNA_bam/{{sample}}.rRNA.aln.bam"
    shell:
        "{samtools} sort -o {output} {input} && {samtools} index {output} && rm {input}"

rule rRNA_sort_map:
    input:
        f"{outdir}/rRNA_bam/{{sample}}.rRNA.aln.bam"
    output:
        f"{outdir}/rRNA_map/{{sample}}.rRNA.aln.mapped.bam"
    shell:
        "{samtools} view -b -hSF 4 {input} > {output}"

rule rRNA_sort_unmap:
    input:
        f"{outdir}/rRNA_bam/{{sample}}.rRNA.aln.bam"
    output:
        f"{outdir}/rRNA_unmap/{{sample}}.rRNA.aln.unmapped.bam"
    shell:
        "{samtools} view -b -hSf 4 {input} > {output}"

rule rRNA_seq:
    input:
        f"{outdir}/rRNA_map/{{sample}}.rRNA.aln.mapped.bam"
    output:
        f"{outdir}/rRNA_count_seq/{{sample}}.rRNA.aln.mapped.reads.counts.seq"
    shell:
        """{samtools} fastq {input} | awk '{{if(NR%4==2) print $0}}' | awk '{{l[$0]=l[$0]+1}}END{{for (e in l){{print e"\\t"l[e]}} }}' > {output}"""

rule rRNA_select_seq:
    input:
        f"{outdir}/rRNA_count_seq/{{sample}}.rRNA.aln.mapped.reads.counts.seq"
    output:
        f"{outdir}/rRNA_seq/{{sample}}.rRNA.aln.mapped.reads.seq"
    shell:
        "cat {input} | cut -f 1 > {output}"

rule rRNA_license_plate:
    input:
        f"{outdir}/rRNA_seq/{{sample}}.rRNA.aln.mapped.reads.seq"
    output:
        f"{outdir}/rRNA_license_plates/{{sample}}.rRNA.aln.mapped.reads.seq.license.plates"
    shell:
        "python {MINTplate} --p rRF {input} en > {output}"

rule rRNA_count_license_plate:
    input:
        license = f"{outdir}/rRNA_license_plates/{{sample}}.rRNA.aln.mapped.reads.seq.license.plates",
        reads   = f"{outdir}/rRNA_count_seq/{{sample}}.rRNA.aln.mapped.reads.counts.seq"
    output:
        f"{outdir}/rRNA_count_real_seq/{{sample}}.rRNA.aln.mapped.reads.counts.real.seq"
    shell:
        """paste {input.reads} {input.license} | cut -f 1,2,4 > {output}.tmp && mv {output}.tmp {output}"""

rule sncRNA_mapping:
    input:
        f"{outdir}/rRNA_unmap/{{sample}}.rRNA.aln.unmapped.bam"
    output:
        f"{outdir}/sncRNA_sam/{{sample}}.sncRNA.aln.sam"
    log:
        f"{outdir}/log_sncRNA_sam/{{sample}}.sncRNA.aln.log"
    shell:
        "{samtools} fastq {input} | /data/home/leijiaxin2/miniconda3/bin/bowtie --seedlen 15 -p 1 -k1 -v1 -m2 -M1 --best --strata --chunkmbs 8000 -S {INDEX_snoRNA_BT} - 2> {log} > {output}"

rule sncRNA_sort:
    input:
        f"{outdir}/sncRNA_sam/{{sample}}.sncRNA.aln.sam"
    output:
        f"{outdir}/sncRNA_bam/{{sample}}.sncRNA.aln.bam"
    shell:
        "{samtools} sort -o {output} {input} && {samtools} index {output} && rm {input}"

rule sncRNA_count:
    input:
        f"{outdir}/sncRNA_bam/{{sample}}.sncRNA.aln.bam"
    output:
        f"{outdir}/sncRNA_tsv/{{sample}}.other.count.tsv"
    shell:
       "{samtools} idxstat {input} > {output}"

rule sncRNA_temp:
    input:
        f"{outdir}/sncRNA_tsv/{{sample}}.other.count.tsv"
    output:
        f"{outdir}/sncRNA_temp/{{sample}}.temp_sncRNA.txt"
    shell:
       "sed '$d' {input} > {output}"

rule miRNA_temp:
    input:
        f"{outdir}/miRNA_count/{{sample}}.miRNA.count.tsv"
    output:
        f"{outdir}/miRNA_temp/{{sample}}.temp_miRNA.txt"
    shell:
       "sed '$d' {input} > {output}"

rule premiRNA_temp:
    input:
        f"{outdir}/premiRNA_count/{{sample}}.premiRNA.count.tsv"
    output:
        f"{outdir}/premiRNA_temp/{{sample}}.temp_premiRNA.txt"
    shell:
       "sed '$d' {input} > {output}"

rule rRNA_temp:
    input:
        f"{outdir}/rRNA_count_real_seq/{{sample}}.rRNA.aln.mapped.reads.counts.real.seq"
    output:
        f"{outdir}/rRNA_temp/{{sample}}.temp_rRNA.txt"
    shell:
       "awk '{{print $3, $1, $2}}' {input} > {output}"

rule rRNA_fix_temp:
    input:
        f"{outdir}/rRNA_temp/{{sample}}.temp_rRNA.txt"
    output:
        f"{outdir}/fix.rRNA_temp/{{sample}}.fix.temp_rRNA.txt"
    shell:
       "awk '{{split($1,a,\"-\"); print $1, a[2], $NF}}' {input} > {output}"

rule conbind_count:
    input:
        premiRNA = f"{outdir}/premiRNA_temp/{{sample}}.temp_premiRNA.txt",
        miRNA    = f"{outdir}/miRNA_temp/{{sample}}.temp_miRNA.txt",
        tRNA     = f"{outdir}/tDR_count/{{sample}}_tDR.txt",
        rRNA     = f"{outdir}/fix.rRNA_temp/{{sample}}.fix.temp_rRNA.txt",
        sncRNA   = f"{outdir}/sncRNA_temp/{{sample}}.temp_sncRNA.txt"
    output:
        f"{outdir}/fix_combined_count/combined_{{sample}}.txt"
    shell:
        "cat {input.premiRNA} {input.miRNA} {input.tRNA} {input.rRNA} {input.sncRNA} > {output}"

rule process_data_1:
    input:
        f"{outdir}/fix_combined_count/combined_{{sample}}.txt"
    output:
        f"{outdir}/sample-fragment/test/{{sample}}.txt"
    shell:
        """
        awk '$3 != 0' {input} > {output}
        """

rule process_data_2:
    input:
        raw_file = f"{outdir}/sample-fragment/test/{{sample}}.txt"
    output:
        processed_file = f"{outdir}/sample-fragment/test1/{{sample}}.txt"
    shell:
        """
        mkdir -p {outdir}/sample-fragment/test1;
        total=$(awk '{{sum += $3}} END {{print sum}}' {input.raw_file}); \
        awk -v total="$total" '{{print $1, $2, $3, ($3 / total * 1000000)}}' {input.raw_file} > {output.processed_file}
        """

rule process_data_3:
    input:
        raw_file = f"{outdir}/sample-fragment/test1/{{sample}}.txt"
    output:
        processed_file = f"{outdir}/sample-fragment/need/{{sample}}.txt"
    shell:
        """
        awk '{{print $1, $2, $3, $4, "{wildcards.sample}" }}' {input.raw_file} > {output.processed_file}
        """

rule process_data_4:
    input:
        txt_files = expand(f"{outdir}/sample-fragment/need/{{sample}}.txt", sample=samples)
    output:
        f"{outdir}/total/result.txt"
    shell:
        """
        echo -e "sncRNAs\tlength\tcount\tCPM\tsample" > {output};
        for file in {input.txt_files}; do
            cat $file >> {output};
        done
        """

rule clean_up:
    input:
        f"{outdir}/total/result.txt"  # 作为触发清理任务的依赖
    output:
        f"{outdir}/clean_done"  # 一个标志文件，表明清理任务完成
    shell:
        """
        echo "Cleaning up temporary files and folders..."
        rm -rf {outdir}/fix_combined_count {outdir}/sncRNA_temp {outdir}/miRNA_temp {outdir}/premiRNA_temp {outdir}/rRNA_temp
        rm -rf {outdir}/log_premiRNA_sam {outdir}/log_sncRNA_sam {outdir}/log_miRNA_sam
        rm -rf {outdir}/rRNA_seq {outdir}/sncRNA_bam {outdir}/rRNA_bam {outdir}/miRNA_bam
        rm -rf {outdir}/premiRNA_bam {outdir}/tDR_count {outdir}/html_fastq
        rm -rf {outdir}/tRNA_unmap {outdir}/sncRNA_tsv {outdir}/rRNA_map
        rm -rf {outdir}/fix.rRNA_temp {outdir}/premiRNA_count {outdir}/premiRNA_unmap_fastq
        rm -rf {outdir}/rRNA_unmap {outdir}/findadapt_output {outdir}/rRNA_count_seq
        rm -rf {outdir}/rRNA_license_plates {outdir}/rRNA_count_real_seq {outdir}/premiRNA_unmap {outdir}/sample-fragment
        touch {output}  # 创建标志文件，表示清理完成
        """
